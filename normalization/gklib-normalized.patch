diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6a9a694..c7ad316 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -21,6 +21,7 @@ option(ASSERT2 "additional assertions" OFF)
 option(DEBUG "add debugging support" OFF)
 option(GPROF "add gprof support" OFF)
 option(GDB "add gdb support" OFF)
+option(NORMALIZED "normalize for A/B testing with Rust" OFF)
 option(GKRAND "enable GKRAND support" OFF)
 option(GKREGEX "enable GKREGEX support" OFF)
 option(OPENMP "enable OpenMP support" OFF)
@@ -89,6 +90,7 @@ target_compile_definitions(${PROJECT_NAME}
          $<$<NOT:$<BOOL:${ASSERT2}>>:NDEBUG2>
          $<$<BOOL:${DEBUG}>:DEBUG>
          $<$<BOOL:${GKRAND}>:GKRAND>
+         $<$<BOOL:${NORMALIZED}>:NORMALIZED>
          $<$<BOOL:${NO_X86}>:NO_X86>
          )
 
diff --git a/src/fs.c b/src/fs.c
index 21081dd..d00280c 100644
--- a/src/fs.c
+++ b/src/fs.c
@@ -25,7 +25,7 @@ int gk_fexists(char *fname)
   if (stat(fname, &status) == -1)
     return 0;
 
-  return S_ISREG(status.st_mode);
+  return S_ISREG(status.st_mode) | S_ISFIFO(status.st_mode);
 }
 
 
diff --git a/src/random.c b/src/random.c
index 3698614..3a70e46 100644
--- a/src/random.c
+++ b/src/random.c
@@ -29,7 +29,9 @@ GK_MKRANDOM(gk_zu,  size_t, size_t)
 /*! GKlib's built in random number generator for portability across 
     different architectures */
 /*************************************************************************/
-#ifdef USE_GKRAND
+#ifdef NORMALIZED
+static uint64_t wy_state; 
+#elifdef USE_GKRAND
 /* 
    A C-program for MT19937-64 (2004/9/29 version).
    Coded by Takuji Nishimura and Makoto Matsumoto.
@@ -72,7 +74,9 @@ static int mti=NN+1;
 /* initializes mt[NN] with a seed */
 void gk_randinit(uint64_t seed)
 {
-#ifdef USE_GKRAND
+#ifdef NORMALIZED
+  wy_state = seed;
+#elifdef USE_GKRAND
   mt[0] = seed;
   for (mti=1; mti<NN; mti++) 
     mt[mti] = (6364136223846793005ULL * (mt[mti-1] ^ (mt[mti-1] >> 62)) + mti);
@@ -85,7 +89,18 @@ void gk_randinit(uint64_t seed)
 /* generates a random number on [0, 2^64-1]-interval */
 uint64_t gk_randint64(void)
 {
-#ifdef USE_GKRAND
+#ifdef NORMALIZED
+  // fastrand's WyRand implementation
+  // const uint64_t WY_CONST_0 = 0x2d35'8dcc'aa6c'78a5;
+  // const uint64_t WY_CONST_1 = 0x8bb8'4b93'962e'acc9;
+  const uint64_t WY_CONST_0 = 0x2d358dccaa6c78a5;
+  const uint64_t WY_CONST_1 = 0x8bb84b93962eacc9;
+
+  const uint64_t s = wy_state + WY_CONST_0;
+  wy_state = s;
+  const unsigned __int128 t = (unsigned __int128)s * (unsigned __int128)(s ^ WY_CONST_1);
+  return (uint64_t)t ^ (uint64_t)(t >> 64);
+#elifdef USE_GKRAND
   int i;
   unsigned long long x;
   static uint64_t mag01[2]={0ULL, MATRIX_A};
@@ -126,7 +141,9 @@ uint64_t gk_randint64(void)
 /* generates a random number on [0, 2^32-1]-interval */
 uint32_t gk_randint32(void)
 {
-#ifdef USE_GKRAND
+#ifdef NORMALIZED
+  return (uint32_t)(gk_randint64() & 0x7FFFFFFF);
+#elifdef USE_GKRAND
   return (uint32_t)(gk_randint64() & 0x7FFFFFFF);
 #else
   return (uint32_t)rand();
